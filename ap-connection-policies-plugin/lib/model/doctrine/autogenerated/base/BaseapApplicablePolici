<?php

// +------------------------------------------------------------------------+
// | AuthPuppy Authentication Server                                        |
// | =============================                                          |
// |                                                                        |
// | AuthPuppy is the new generation of authentication server for           |
// | a wifidog based captive portal suite                                   |
// +------------------------------------------------------------------------+
// | PHP version 5 required.                                                |
// +------------------------------------------------------------------------+
// | Homepage:     http://www.authpuppy.org/                                |
// | Launchpad:    http://www.launchpad.net/authpuppy                       |
// +------------------------------------------------------------------------+
// | This program is free software; you can redistribute it and/or modify   |
// | it under the terms of the GNU General Public License as published by   |
// | the Free Software Foundation; either version 2 of the License, or      |
// | (at your option) any later version.                                    |
// |                                                                        |
// | This program is distributed in the hope that it will be useful,        |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of         |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          |
// | GNU General Public License for more details.                           |
// |                                                                        |
// | You should have received a copy of the GNU General Public License along|
// | with this program; if not, write to the Free Software Foundation, Inc.,|
// | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.            |
// +------------------------------------------------------------------------+

/**
 * BaseapApplicablePolicies
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $connection_id
 * @property integer $policy_id
 * @property Connection $Connection
 * @property apConnectionPolicies $Policy
 * 
 * @method integer              getConnectionId()  Returns the current record's "connection_id" value
 * @method integer              getPolicyId()      Returns the current record's "policy_id" value
 * @method Connection           getConnection()    Returns the current record's "Connection" value
 * @method apConnectionPolicies getPolicy()        Returns the current record's "Policy" value
 * @method apApplicablePolicies setConnectionId()  Sets the current record's "connection_id" value
 * @method apApplicablePolicies setPolicyId()      Sets the current record's "policy_id" value
 * @method apApplicablePolicies setConnection()    Sets the current record's "Connection" value
 * @method apApplicablePolicies setPolicy()        Sets the current record's "Policy" value
 * 
 * @package    apConnectionPoliciesPlugin
 * @author     GeneviÃ¨ve Bastien <gbastien@versatic.net>
 * @copyright  2010
 * @version    $Version: 0.1.2$
 */
abstract class BaseapApplicablePolicies extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ap_applicable_policies');
        $this->hasColumn('connection_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('policy_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('this_total_data', 'float', null, array(
             'default' => 0
        ));
        $this->hasColumn('total_data', 'float', null, array(
             'default' => 0
        ));
         $this->hasColumn('disconnect_at', 'timestamp');
         $this->hasColumn('status_message', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));

        $this->index('conn_idx', array(
             'fields' => 
             array(
              0 => 'connection_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Connection', array(
             'local' => 'connection_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('apConnectionPolicies as Policy', array(
             'local' => 'policy_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}