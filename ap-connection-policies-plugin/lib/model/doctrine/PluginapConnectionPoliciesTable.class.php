<?php

// +------------------------------------------------------------------------+
// | AuthPuppy Authentication Server                                        |
// | =============================                                          |
// |                                                                        |
// | AuthPuppy is the new generation of authentication server for           |
// | a wifidog based captive portal suite                                   |
// +------------------------------------------------------------------------+
// | PHP version 5 required.                                                |
// +------------------------------------------------------------------------+
// | Homepage:     http://www.authpuppy.org/                                |
// | Launchpad:    http://www.launchpad.net/authpuppy                       |
// +------------------------------------------------------------------------+
// | This program is free software; you can redistribute it and/or modify   |
// | it under the terms of the GNU General Public License as published by   |
// | the Free Software Foundation; either version 2 of the License, or      |
// | (at your option) any later version.                                    |
// |                                                                        |
// | This program is distributed in the hope that it will be useful,        |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of         |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          |
// | GNU General Public License for more details.                           |
// |                                                                        |
// | You should have received a copy of the GNU General Public License along|
// | with this program; if not, write to the Free Software Foundation, Inc.,|
// | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.            |
// +------------------------------------------------------------------------+


/**
 * PluginapConnectionPoliciesTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * @package    apConnectionPoliciesPlugin
 * @author     GeneviÃ¨ve Bastien <gbastien@versatic.net>
 * @copyright  2010
 * @version    $Version: 0.1.2$
 */
class PluginapConnectionPoliciesTable extends Doctrine_Table
{
  CONST ALL_AUTH = "All";
  CONST TYPE_ABSOLUTE = "absolute";
  CONST TYPE_RELATIVE = "relative";
  CONST SCOPE_GLOBAL = "global";
  CONST SCOPE_LOCAL = "local";
  
  protected $auths = null;
  
  static public $types = array(
    self::TYPE_ABSOLUTE => 'Absolute',
    self::TYPE_RELATIVE => 'Relative',
  );
  
  static public $scopes = array(
    self::SCOPE_GLOBAL => 'Global',
    self::SCOPE_LOCAL => 'Local',
  );
 
  
    /**
     * Returns an instance of this class.
     *
     * @return object PluginapConnectionPoliciesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginapConnectionPolicies');
    }
    
  public function getTypes()
  {
    return self::$types;
  }
  
  public function getScopes() {
    return self::$scopes;
  }
  
  /**
   * Request the authenticator to report their different interfaces that can be used to set policies
   * @return array of 'authenticator' => array of sub auth types
   */
  public function getAllAuthTypes() {
    return apAuthenticatorManager::getAuthTypes();
  }
  
  public function getAuthSubTypes() {
    $authTypes = $this->getAllAuthTypes();
    $subtypes = array(self::ALL_AUTH => self::ALL_AUTH);
    foreach ($authTypes as $type => $sub) {
      if (empty($sub)) {
        $subtypes[$type] = $type;
      } else {
        $subtypes[$type] = array(self::ALL_AUTH => self::ALL_AUTH);
        if (is_array($sub)) {
          foreach ($sub as $subtype) {
            $subtypes[$type][$subtype] = $subtype;
          }
        } elseif (is_string($sub)) {
          $subtypes[$type][$sub] = $sub;
        }
      }
    }
    return $subtypes;
  }
  
  /**
   * Returns whether the given subtype is a subtype of authtype
   * @param unknown_type $subtype
   * @param unknown_type $authtype
   * @return boolean
   */
  public function subTypeInType($subtype, $authtype) {
    if ($subtype != self::ALL_AUTH) {
      $authTypes = $this->getAllAuthTypes();
      if (isset($authTypes[$authtype])) {
        $subtypes = $authTypes[$authtype];
        return in_array($subtype, $subtypes);
      } else {
        return false;
      }
    }
    return true;
  }
  
  /**
   * List the main authentication types
   * @return array
   */
  public function getAuthTypes() {
    $authTypes = $this->getAllAuthTypes();
    $authTypes = array_merge(array(self::ALL_AUTH), array_keys($authTypes));
    $types = array();
    foreach ($authTypes as $type)
      $types[$type] = $type;
    return $types;
  }
  
  /**
   * Returns the list of all policies that match the current identity
   * @param apIdentity $identity
   */
  public function getMatchingPolicies(Connection $connection) {
    $q = $this->createQuery('a')
      ->where('(a.auth_type = ?', $connection->getAuthType())
      ->orWhere('a.auth_type = ?)', self::ALL_AUTH)
      ->addWhere('(a.auth_sub_type = ?', $connection->getAuthSubType())
      ->orWhere('a.auth_sub_type = ?)', self::ALL_AUTH);
 
    return $q->execute();
      
  }
  
  public function getList() {
    $q = $this->createQuery('p')->select('p.id,p.policy_name');
    return $q->execute();
  }
}